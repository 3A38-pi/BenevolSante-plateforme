{% extends 'base2.html.twig' %}


{% block title %}User Statistics{% endblock %}



{% block body %}
    
<div class="container mt-5">
    <h1 class="mb-4">User Statistics by Type</h1>
    <div style="position: relative; height: 400px;">
        <canvas id="userStatisticsChart" width="400" height="400"></canvas>
        <div id="centerText" style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); font-size: 24px; font-weight: bold;"></div>
    </div>
</div>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels"></script>  
<script>

    const ctx = document.getElementById('userStatisticsChart').getContext('2d');
    const totalUsers = {{ totalUsers }}; // Get total users from the controller
    const data = {{ data|json_encode|raw }};
    const labels = {{ labels|json_encode|raw }};
    
    // Calculate percentages for each role
    const percentages = data.map(value => ((value / totalUsers) * 100).toFixed(1) + '%');

    const userStatisticsChart = new Chart(ctx, {
        type: 'pie',
        data: {
            labels: labels.map((label, index) => `${label} (${percentages[index]})`), // Append percentage to labels
            datasets: [{
                data: data,
                backgroundColor: [
                    'rgba(255, 99, 132, 0.6)',
                    'rgba(54, 162, 235, 0.6)',
                    'rgba(75, 192, 192, 0.6)'
                ],
                borderColor: [
                    'rgba(255, 99, 132, 1)',
                    'rgba(54, 162, 235, 1)',
                    'rgba(75, 192, 192, 1)'
                ],
                borderWidth: 1
            }]
        },
        options: {
            responsive: true,
            maintainAspectRatio: false,
            plugins: {
                legend: {
                    display: true,
                    position: 'bottom',
                    labels: {
                        color: '#000',
                        font: {
                            size: 14,
                        },
                        onClick: (e, legendItem) => {
                            const index = legendItem.datasetIndex; // Get the index of the clicked legend item
                            const chart = legendItem.chart; // Reference to the chart
                            const meta = chart.getDatasetMeta(index); // Get metadata for the dataset
                            
                            // Toggle visibility
                            meta.hidden = meta.hidden === null ? !chart.data.datasets[index].data : null;
                            chart.update(); // Update the chart to reflect changes
                            updateCenterText(chart); // Update center text after toggling
                        }
                    }
                },
                tooltip: {
                    enabled: true, // Enable tooltips
                    callbacks: {
                        label: function(tooltipItem) {
                            const index = tooltipItem.dataIndex;
                            const userCount = tooltipItem.dataset.data[index];
                            return `${tooltipItem.label}: ${userCount}`; // Show only the number of users
                        }
                    }
                },
                datalabels: {
                    color: '#000', // Black color for better visibility
                    formatter: (value) => {
                        const percentage = ((value / totalUsers) * 100).toFixed(1) + '%'; // Calculate percentage
                        return percentage; // Show percentage
                    },
                    font: {
                        weight: 'bold',
                        size: 16,
                    },
                    anchor: 'end', // Place the label outside the slice
                    align: 'end', // Align the label to the end of the slice
                    offset: 10, // Distance from the slice
                }
            },
            animation: {
                duration: 1000, // Smooth animation duration
                easing: 'easeInOutQuart', // Smooth animation easing
            },
        }
    });
</script>
{% endblock %} 